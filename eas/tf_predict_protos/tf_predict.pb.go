// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tf_predict.proto

package tf_predict_protos

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArrayDataType int32

const (
	// Not a legal value for DataType. Used to indicate a DataType field
	// has not been set.
	ArrayDataType_DT_INVALID ArrayDataType = 0
	// Data types that all computation devices are expected to be
	// capable to support.
	ArrayDataType_DT_FLOAT      ArrayDataType = 1
	ArrayDataType_DT_DOUBLE     ArrayDataType = 2
	ArrayDataType_DT_INT32      ArrayDataType = 3
	ArrayDataType_DT_UINT8      ArrayDataType = 4
	ArrayDataType_DT_INT16      ArrayDataType = 5
	ArrayDataType_DT_INT8       ArrayDataType = 6
	ArrayDataType_DT_STRING     ArrayDataType = 7
	ArrayDataType_DT_COMPLEX64  ArrayDataType = 8
	ArrayDataType_DT_INT64      ArrayDataType = 9
	ArrayDataType_DT_BOOL       ArrayDataType = 10
	ArrayDataType_DT_QINT8      ArrayDataType = 11
	ArrayDataType_DT_QUINT8     ArrayDataType = 12
	ArrayDataType_DT_QINT32     ArrayDataType = 13
	ArrayDataType_DT_BFLOAT16   ArrayDataType = 14
	ArrayDataType_DT_QINT16     ArrayDataType = 15
	ArrayDataType_DT_QUINT16    ArrayDataType = 16
	ArrayDataType_DT_UINT16     ArrayDataType = 17
	ArrayDataType_DT_COMPLEX128 ArrayDataType = 18
	ArrayDataType_DT_HALF       ArrayDataType = 19
	ArrayDataType_DT_RESOURCE   ArrayDataType = 20
	ArrayDataType_DT_VARIANT    ArrayDataType = 21
)

var ArrayDataType_name = map[int32]string{
	0:  "DT_INVALID",
	1:  "DT_FLOAT",
	2:  "DT_DOUBLE",
	3:  "DT_INT32",
	4:  "DT_UINT8",
	5:  "DT_INT16",
	6:  "DT_INT8",
	7:  "DT_STRING",
	8:  "DT_COMPLEX64",
	9:  "DT_INT64",
	10: "DT_BOOL",
	11: "DT_QINT8",
	12: "DT_QUINT8",
	13: "DT_QINT32",
	14: "DT_BFLOAT16",
	15: "DT_QINT16",
	16: "DT_QUINT16",
	17: "DT_UINT16",
	18: "DT_COMPLEX128",
	19: "DT_HALF",
	20: "DT_RESOURCE",
	21: "DT_VARIANT",
}

var ArrayDataType_value = map[string]int32{
	"DT_INVALID":    0,
	"DT_FLOAT":      1,
	"DT_DOUBLE":     2,
	"DT_INT32":      3,
	"DT_UINT8":      4,
	"DT_INT16":      5,
	"DT_INT8":       6,
	"DT_STRING":     7,
	"DT_COMPLEX64":  8,
	"DT_INT64":      9,
	"DT_BOOL":       10,
	"DT_QINT8":      11,
	"DT_QUINT8":     12,
	"DT_QINT32":     13,
	"DT_BFLOAT16":   14,
	"DT_QINT16":     15,
	"DT_QUINT16":    16,
	"DT_UINT16":     17,
	"DT_COMPLEX128": 18,
	"DT_HALF":       19,
	"DT_RESOURCE":   20,
	"DT_VARIANT":    21,
}

func (x ArrayDataType) String() string {
	return proto.EnumName(ArrayDataType_name, int32(x))
}

func (ArrayDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c77c89afdd4cb9d, []int{0}
}

// Dimensions of an array
type ArrayShape struct {
	Dim                  []int64  `protobuf:"varint,1,rep,packed,name=dim,proto3" json:"dim,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayShape) Reset()         { *m = ArrayShape{} }
func (m *ArrayShape) String() string { return proto.CompactTextString(m) }
func (*ArrayShape) ProtoMessage()    {}
func (*ArrayShape) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c77c89afdd4cb9d, []int{0}
}

func (m *ArrayShape) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayShape.Unmarshal(m, b)
}
func (m *ArrayShape) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayShape.Marshal(b, m, deterministic)
}
func (m *ArrayShape) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayShape.Merge(m, src)
}
func (m *ArrayShape) XXX_Size() int {
	return xxx_messageInfo_ArrayShape.Size(m)
}
func (m *ArrayShape) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayShape.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayShape proto.InternalMessageInfo

func (m *ArrayShape) GetDim() []int64 {
	if m != nil {
		return m.Dim
	}
	return nil
}

// Protocol buffer representing an array
type ArrayProto struct {
	// Data Type.
	Dtype ArrayDataType `protobuf:"varint,1,opt,name=dtype,proto3,enum=ArrayDataType" json:"dtype,omitempty"`
	// Shape of the array.
	ArrayShape *ArrayShape `protobuf:"bytes,2,opt,name=array_shape,json=arrayShape,proto3" json:"array_shape,omitempty"`
	// DT_FLOAT.
	FloatVal []float32 `protobuf:"fixed32,3,rep,packed,name=float_val,json=floatVal,proto3" json:"float_val,omitempty"`
	// DT_DOUBLE.
	DoubleVal []float64 `protobuf:"fixed64,4,rep,packed,name=double_val,json=doubleVal,proto3" json:"double_val,omitempty"`
	// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
	IntVal []int32 `protobuf:"varint,5,rep,packed,name=int_val,json=intVal,proto3" json:"int_val,omitempty"`
	// DT_STRING.
	StringVal [][]byte `protobuf:"bytes,6,rep,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	// DT_INT64.
	Int64Val []int64 `protobuf:"varint,7,rep,packed,name=int64_val,json=int64Val,proto3" json:"int64_val,omitempty"`
	// DT_BOOL.
	BoolVal              []bool   `protobuf:"varint,8,rep,packed,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrayProto) Reset()         { *m = ArrayProto{} }
func (m *ArrayProto) String() string { return proto.CompactTextString(m) }
func (*ArrayProto) ProtoMessage()    {}
func (*ArrayProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c77c89afdd4cb9d, []int{1}
}

func (m *ArrayProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrayProto.Unmarshal(m, b)
}
func (m *ArrayProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrayProto.Marshal(b, m, deterministic)
}
func (m *ArrayProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrayProto.Merge(m, src)
}
func (m *ArrayProto) XXX_Size() int {
	return xxx_messageInfo_ArrayProto.Size(m)
}
func (m *ArrayProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrayProto.DiscardUnknown(m)
}

var xxx_messageInfo_ArrayProto proto.InternalMessageInfo

func (m *ArrayProto) GetDtype() ArrayDataType {
	if m != nil {
		return m.Dtype
	}
	return ArrayDataType_DT_INVALID
}

func (m *ArrayProto) GetArrayShape() *ArrayShape {
	if m != nil {
		return m.ArrayShape
	}
	return nil
}

func (m *ArrayProto) GetFloatVal() []float32 {
	if m != nil {
		return m.FloatVal
	}
	return nil
}

func (m *ArrayProto) GetDoubleVal() []float64 {
	if m != nil {
		return m.DoubleVal
	}
	return nil
}

func (m *ArrayProto) GetIntVal() []int32 {
	if m != nil {
		return m.IntVal
	}
	return nil
}

func (m *ArrayProto) GetStringVal() [][]byte {
	if m != nil {
		return m.StringVal
	}
	return nil
}

func (m *ArrayProto) GetInt64Val() []int64 {
	if m != nil {
		return m.Int64Val
	}
	return nil
}

func (m *ArrayProto) GetBoolVal() []bool {
	if m != nil {
		return m.BoolVal
	}
	return nil
}

// PredictRequest specifies which TensorFlow model to run, as well as
// how inputs are mapped to tensors and how outputs are filtered before
// returning to user.
type PredictRequest struct {
	// A named signature to evaluate. If unspecified, the default signature
	// will be used
	SignatureName string `protobuf:"bytes,1,opt,name=signature_name,json=signatureName,proto3" json:"signature_name,omitempty"`
	// Input tensors.
	// Names of input tensor are alias names. The mapping from aliases to real
	// input tensor names is expected to be stored as named generic signature
	// under the key "inputs" in the model export.
	// Each alias listed in a generic signature named "inputs" should be provided
	// exactly once in order to run the prediction.
	Inputs map[string]*ArrayProto `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output filter.
	// Names specified are alias names. The mapping from aliases to real output
	// tensor names is expected to be stored as named generic signature under
	// the key "outputs" in the model export.
	// Only tensors specified here will be run/fetched and returned, with the
	// exception that when none is specified, all tensors specified in the
	// named signature will be run/fetched and returned.
	OutputFilter         []string `protobuf:"bytes,3,rep,name=output_filter,json=outputFilter,proto3" json:"output_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PredictRequest) Reset()         { *m = PredictRequest{} }
func (m *PredictRequest) String() string { return proto.CompactTextString(m) }
func (*PredictRequest) ProtoMessage()    {}
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c77c89afdd4cb9d, []int{2}
}

func (m *PredictRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredictRequest.Unmarshal(m, b)
}
func (m *PredictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredictRequest.Marshal(b, m, deterministic)
}
func (m *PredictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictRequest.Merge(m, src)
}
func (m *PredictRequest) XXX_Size() int {
	return xxx_messageInfo_PredictRequest.Size(m)
}
func (m *PredictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PredictRequest proto.InternalMessageInfo

func (m *PredictRequest) GetSignatureName() string {
	if m != nil {
		return m.SignatureName
	}
	return ""
}

func (m *PredictRequest) GetInputs() map[string]*ArrayProto {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *PredictRequest) GetOutputFilter() []string {
	if m != nil {
		return m.OutputFilter
	}
	return nil
}

// Response for PredictRequest on successful run.
type PredictResponse struct {
	// Output tensors.
	Outputs              map[string]*ArrayProto `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PredictResponse) Reset()         { *m = PredictResponse{} }
func (m *PredictResponse) String() string { return proto.CompactTextString(m) }
func (*PredictResponse) ProtoMessage()    {}
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c77c89afdd4cb9d, []int{3}
}

func (m *PredictResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredictResponse.Unmarshal(m, b)
}
func (m *PredictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredictResponse.Marshal(b, m, deterministic)
}
func (m *PredictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictResponse.Merge(m, src)
}
func (m *PredictResponse) XXX_Size() int {
	return xxx_messageInfo_PredictResponse.Size(m)
}
func (m *PredictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PredictResponse proto.InternalMessageInfo

func (m *PredictResponse) GetOutputs() map[string]*ArrayProto {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterEnum("ArrayDataType", ArrayDataType_name, ArrayDataType_value)
	proto.RegisterType((*ArrayShape)(nil), "ArrayShape")
	proto.RegisterType((*ArrayProto)(nil), "ArrayProto")
	proto.RegisterType((*PredictRequest)(nil), "PredictRequest")
	proto.RegisterMapType((map[string]*ArrayProto)(nil), "PredictRequest.InputsEntry")
	proto.RegisterType((*PredictResponse)(nil), "PredictResponse")
	proto.RegisterMapType((map[string]*ArrayProto)(nil), "PredictResponse.OutputsEntry")
}

func init() { proto.RegisterFile("tf_predict.proto", fileDescriptor_5c77c89afdd4cb9d) }

var fileDescriptor_5c77c89afdd4cb9d = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x4e, 0xdb, 0x48,
	0x14, 0xc6, 0xd7, 0x36, 0xf9, 0xe3, 0xe3, 0x24, 0x0c, 0xb3, 0xac, 0x14, 0x81, 0x10, 0x26, 0xbb,
	0x2b, 0xb9, 0x55, 0x65, 0x29, 0x01, 0xa5, 0x51, 0xa5, 0x5e, 0x24, 0x24, 0xa1, 0x96, 0xd2, 0x18,
	0x8c, 0x89, 0x7a, 0x67, 0x0d, 0x64, 0xa0, 0x56, 0x1d, 0xdb, 0xb5, 0xc7, 0x48, 0x79, 0x8e, 0xbe,
	0x40, 0x5f, 0xab, 0xea, 0x8b, 0xf4, 0xb2, 0xf2, 0xcc, 0x40, 0x80, 0xcb, 0xde, 0xe5, 0x7c, 0xbf,
	0x73, 0xbe, 0xf3, 0x79, 0x66, 0x14, 0x40, 0xec, 0x36, 0x48, 0x33, 0xba, 0x0c, 0x6f, 0x98, 0x9d,
	0x66, 0x09, 0x4b, 0x3a, 0x1d, 0x80, 0x61, 0x96, 0x91, 0xf5, 0xe5, 0x67, 0x92, 0x52, 0xbc, 0x0b,
	0xda, 0x32, 0x5c, 0xb5, 0x15, 0x53, 0xb3, 0xb4, 0x91, 0x8a, 0x14, 0xaf, 0x2c, 0x3b, 0xdf, 0x55,
	0xd9, 0x74, 0x5e, 0x8e, 0xe0, 0xff, 0xa0, 0xb2, 0x64, 0xeb, 0x94, 0xb6, 0x15, 0x53, 0xb1, 0x5a,
	0xbd, 0x96, 0xcd, 0xd9, 0x98, 0x30, 0xe2, 0xaf, 0x53, 0xea, 0x09, 0x88, 0xdf, 0x80, 0x41, 0x4a,
	0x3d, 0xc8, 0x4b, 0xe7, 0xb6, 0x6a, 0x2a, 0x96, 0xd1, 0x33, 0xec, 0xcd, 0x32, 0x0f, 0xc8, 0x66,
	0xf1, 0x21, 0xe8, 0xb7, 0x51, 0x42, 0x58, 0x70, 0x4f, 0xa2, 0xb6, 0x66, 0x6a, 0x96, 0xca, 0xd7,
	0xd7, 0xb9, 0xb8, 0x20, 0x11, 0x3e, 0x02, 0x58, 0x26, 0xc5, 0x75, 0x44, 0x79, 0xc7, 0x96, 0xa9,
	0x59, 0x0a, 0xef, 0xd0, 0x85, 0x5a, 0xb6, 0xec, 0x43, 0x2d, 0x8c, 0x85, 0x43, 0xc5, 0xd4, 0xac,
	0x0a, 0xe7, 0xd5, 0x30, 0xe6, 0xf3, 0x07, 0x00, 0x39, 0xcb, 0xc2, 0xf8, 0x8e, 0xf3, 0xaa, 0xa9,
	0x59, 0x0d, 0x4f, 0x17, 0x4a, 0x89, 0x0f, 0x41, 0x0f, 0x63, 0xd6, 0x3f, 0xe1, 0xb4, 0xf6, 0xf8,
	0xf9, 0x75, 0x2e, 0x8a, 0xf9, 0xfa, 0x75, 0x92, 0x44, 0x9c, 0xd7, 0x4d, 0xcd, 0xaa, 0x73, 0x5e,
	0x2b, 0xb5, 0x05, 0x89, 0x3a, 0x3f, 0x14, 0x68, 0x9d, 0x8b, 0x83, 0xf5, 0xe8, 0xd7, 0x82, 0xe6,
	0x0c, 0xff, 0x0f, 0xad, 0x3c, 0xbc, 0x8b, 0x09, 0x2b, 0x32, 0x1a, 0xc4, 0x64, 0x25, 0xce, 0x4b,
	0xf7, 0x9a, 0x8f, 0xea, 0x9c, 0xac, 0x28, 0x3e, 0x86, 0x6a, 0x18, 0xa7, 0x05, 0xcb, 0xdb, 0xaa,
	0xa9, 0x59, 0x46, 0x6f, 0xdf, 0x7e, 0xee, 0x63, 0x3b, 0x9c, 0x4e, 0x62, 0x96, 0xad, 0x3d, 0xd9,
	0x8a, 0xff, 0x85, 0x66, 0x52, 0xb0, 0xb4, 0x60, 0xc1, 0x6d, 0x18, 0x31, 0x9a, 0xf1, 0x23, 0xd3,
	0xbd, 0x86, 0x10, 0xa7, 0x5c, 0xdb, 0x9b, 0x82, 0xf1, 0x64, 0x16, 0x23, 0xd0, 0xbe, 0xd0, 0xb5,
	0x0c, 0x51, 0xfe, 0xc4, 0x47, 0x50, 0xb9, 0x27, 0x51, 0xf1, 0xe2, 0x72, 0xf8, 0x25, 0x7b, 0x82,
	0xbc, 0x53, 0x07, 0x4a, 0xe7, 0x9b, 0x02, 0xdb, 0x8f, 0x99, 0xf2, 0x34, 0x89, 0x73, 0x8a, 0xdf,
	0x42, 0x4d, 0xec, 0xca, 0xf9, 0x63, 0x31, 0x7a, 0x07, 0xf6, 0x8b, 0x16, 0xdb, 0x15, 0x5c, 0x04,
	0x7f, 0xe8, 0xde, 0x3b, 0x83, 0xc6, 0x53, 0xf0, 0xc7, 0xa9, 0x5e, 0xff, 0x54, 0xa1, 0xf9, 0xec,
	0xe1, 0xe1, 0x16, 0xc0, 0xd8, 0x0f, 0x9c, 0xf9, 0x62, 0x38, 0x73, 0xc6, 0xe8, 0x2f, 0xdc, 0x80,
	0xfa, 0xd8, 0x0f, 0xa6, 0x33, 0x77, 0xe8, 0x23, 0x05, 0x37, 0x41, 0x1f, 0xfb, 0xc1, 0xd8, 0xbd,
	0x1a, 0xcd, 0x26, 0x48, 0x95, 0xd0, 0x99, 0xfb, 0xc7, 0x3d, 0xa4, 0xc9, 0xea, 0xca, 0x99, 0xfb,
	0x03, 0xb4, 0xb5, 0x61, 0xdd, 0x3e, 0xaa, 0x60, 0x03, 0x6a, 0xa2, 0x1a, 0xa0, 0xaa, 0x74, 0xb9,
	0xf4, 0x3d, 0x67, 0x7e, 0x86, 0x6a, 0x18, 0x41, 0x63, 0xec, 0x07, 0xa7, 0xee, 0xc7, 0xf3, 0xd9,
	0xe4, 0x53, 0xff, 0x04, 0xd5, 0x37, 0xb3, 0xfd, 0x13, 0xa4, 0xcb, 0xd9, 0x91, 0xeb, 0xce, 0x10,
	0x48, 0x74, 0xc1, 0x9d, 0x0c, 0xe9, 0x74, 0x21, 0x76, 0x36, 0x1e, 0x4a, 0x11, 0xa8, 0x89, 0xb7,
	0xc1, 0x28, 0x07, 0x79, 0xf8, 0x6e, 0x1f, 0xb5, 0x9e, 0xf0, 0x6e, 0x1f, 0x6d, 0xcb, 0x6f, 0xe5,
	0xd3, 0xdd, 0x3e, 0x42, 0x12, 0xcb, 0x72, 0x07, 0xef, 0x40, 0x73, 0x93, 0xab, 0xdb, 0x1b, 0x20,
	0x2c, 0xa3, 0x7c, 0x18, 0xce, 0xa6, 0xe8, 0x6f, 0x69, 0xef, 0x4d, 0x2e, 0xdd, 0x2b, 0xef, 0x74,
	0x82, 0x76, 0xa5, 0xdf, 0x62, 0xe8, 0x39, 0xc3, 0xb9, 0x8f, 0xfe, 0x19, 0xbd, 0x87, 0x57, 0x37,
	0xc9, 0xca, 0x26, 0x51, 0xb8, 0x2e, 0x62, 0x3b, 0x49, 0x69, 0x9c, 0xd3, 0xec, 0x3e, 0xbc, 0xa1,
	0xb9, 0x4d, 0x49, 0x6e, 0x3f, 0xfb, 0x0f, 0x19, 0x35, 0xe5, 0xd5, 0xf3, 0x3b, 0xca, 0x7f, 0x29,
	0xca, 0x75, 0x95, 0x83, 0xe3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x5a, 0x49, 0x84, 0x70,
	0x04, 0x00, 0x00,
}
